プロジェクトのディレクトリに移動後、下記実行

ドッカー起動コマンド:{
	docker-compose up -d
}

ドッカーコンテナ起動確認コマンド:{
	docker-compose ps
}

ドッカーコンテナに入るコマンド:{
	docker-compose exec web bash
}

ドッカーコンテナ停止コマンド:{
	docker-compose down
}


Laravel:{
	composer create-project --prefer-dist laravel/laravel project_name
	exit
	docker-compose down
	docker-compose.yml→./server/フォルダー名:/var/www/html
	docker-compose up -d
	docker-compose exec web bash
	composer install
	npm i
}

.env:{
	DB_CONNECTION=mysql
	DB_HOST=db-host
	DB_PORT=3306
	DB_DATABASE=api_test
	DB_USERNAME=root
	DB_PASSWORD=root
}

logger:{
	storageフォルダの所有者をwww-dataに変更:{
		chown www-data storage/ -R  
	}
}

webpack.mix.js:{
	mix.js('resources/js/app.js', 'public/js')
		.react()
		.sass('resources/sass/app.scss', 'public/css');
}

npm:{
	devDependenciesに追加:{
		npm install --save-dev example
	}
	Dependenciesに追加:{
		npm install --save example
	}
}


package.json:{
	{
		"private": true,
		"scripts": {
			"dev": "npm run development",
			"development": "mix",
			"watch": "mix watch",
			"watch-poll": "mix watch -- --watch-options-poll=1000",
			"hot": "mix watch --hot",
			"prod": "npm run production",
			"production": "mix --production"
		},
		"devDependencies": {
			"@babel/preset-react": "^7.13.13",
			"axios": "^0.21",
			"bootstrap": "^4.6.0",
			"jquery": "^3.6",
			"laravel-mix": "^6.0.6",
			"lodash": "^4.17.19",
			"popper.js": "^1.16.1",
			"postcss": "^8.1.14",
			"react": "^17.0.2",
			"react-dom": "^17.0.2",
			"resolve-url-loader": "^4.0.0",
			"sass": "^1.32.11",
			"sass-loader": "^11.0.1"
		}
	}
}

composer:{
	依存関係あり(vaenderに追加):{
		composer install パッケージ名
	}
	依存関係を無視（compsoer.jsonに追加）:{
		composer require パッケージ名
	}
}

laravelコマンド:{

	キャッシュクリア:{
		php artisan cache:clear
		php artisan config:clear
		php artisan route:clear
		php artisan view:clear
	}

	マイグレーションファイル作成:{
		php artisan make:migration create_複数形_table
		頻繁に使用する型:{
			increments:{
				$table->id();
			}
			外部キー制約:{
				$table->foreignId('user_id')->constrained('users')->comment('カラム名->束縛するidのテーブル');
			}
			文字:{
				$table->string('name')->comment('stringは文字制限不要');
			}
			数字:{
				$table->integer('phone')->comment('数字');
			}
			unique:{
				$table->string('email')->unique();
			}
			default:{
				$table->string('color')->default(black);
			}
			timestamps:{
				$table->timestamps();
			}
			softdeletes:{
				$table->softDeletes()->comment('Modelに文章追加あり');
			}
		}
		カラム追加:{
			add_テーブル名_table --table=テーブル名:{
				$table->string('name')->after('カラム名')->comment();
				$table->dropColumn('name');
			}
		}
		migration:{
			php artisan migration
		}
		fresh, refresh:{
			マイグレーションファイルを全て削除して、マイグレーションし直す:{
				php artisan migrate:fresh
			}
			マイグレーションファイルを全てロールバックして、マイグレーションし直す:{
				php artisan migrate:refresh
			}
		}
	}

	Model:{
		モデル作成:{
			php artisan make:model Example
		}
		モデルとマイグレーション、シーダ、コントローラを生成:{
			php artisan make:model Example -msc
		}
		SoftDeletes:{
			use Illuminate\Database\Eloquent\SoftDeletes;
			use SoftDeletes;
			protected $dates = ['deleted_at'];
		}
		モデルに関連付けるテーブル:{
			protected $table = 'table_name';
		}
		主キー:{
			protected $primaryKey = 'id';
		}
		モデルが使用するデータベース接続:{
			protected $connection = 'mysql';
		}
		fillable:{
			protected $fillable = [
				'name',
				'email',
			]
		}
		hidden:{
			protected $hidden = [
				'password'
			];
		}
	}

	Hash:{
		use Illuminate\Support\Facades\Hash;
	}

	Seeder:{
		php artisan make:seeder ExampleSeeder
		use:{
			use Illuminate\Support\Facades\DB;
			use Illuminate\Support\Facades\Hash;
			use Illuminate\Support\Str;
		}
		function run():{
			DB::table('examples')->insert([
				'name' => Str::random(10),
				'email' => Str::random(10).'@example.com',
				'password' => Hash::make('password'),
			]);
		}
		DatabaseSeeder:{
			$this->call([
        ExampleSeeder::class,
        ExampleSeeder::class,
        ExampleSeeder::class,
			]);
		}
		Seederの実行:{
			php artisan db:seed
			php artisan db:seed --class=ExampleSeeder
		}
	}

	Controller:{
		php artisan make:controller ExampleController
		リソースモデルの指定:{
			php artisan make:controller PhotoController --resource --model=Photo
		}
		API:{
			php artisan make:controller API/ExampleController
		}
	}

	routes:{

	}

}
